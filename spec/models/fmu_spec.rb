# == Schema Information
#
# Table name: fmus
#
#  id                   :integer          not null, primary key
#  country_id           :integer
#  geojson              :jsonb
#  created_at           :datetime         not null
#  updated_at           :datetime         not null
#  certification_fsc    :boolean          default(FALSE)
#  certification_pefc   :boolean          default(FALSE)
#  certification_olb    :boolean          default(FALSE)
#  certification_pafc   :boolean          default(FALSE)
#  certification_fsc_cw :boolean          default(FALSE)
#  certification_tlv    :boolean          default(FALSE)
#  forest_type          :integer          default("fmu"), not null
#  geometry             :geometry         geometry, 0
#  properties           :jsonb
#  deleted_at           :datetime
#  certification_ls     :boolean          default(FALSE)
#  name                 :string
#  deleted_at           :datetime
#

require 'rails_helper'

RSpec.describe Fmu, type: :model do
  it 'is valid with valid attributes' do
    fmu = build(:fmu)
    expect(fmu).to be_valid
  end

  it_should_behave_like 'translatable', :fmu, %i[name]

  describe 'Methods' do
    describe '#cache_key' do
      it 'return the default value with the locale' do
        fmu = build(:fmu)
        expect(fmu.cache_key).to match(/-#{Globalize.locale.to_s}\z/)
      end
    end
    describe '#update_geometry' do
      it 'actually updates coordinates with the ones provided in geojson' do
        country = create(:country)
        operator = create(:operator, country: country, fa_id: 'fa_id')
        fmu = create(:fmu_geojson, operator: operator, country: country)
        fmu.save

        fmu.geojson['geometry']['coordinates'] = [[[[18.05589,2.154854],[18.055703,2.154581],[18.055465,2.154109],[18.055078,2.153564],[18.054952,2.153154],[18.054727,2.152757],[18.054699,2.152272],[18.054784,2.151923],[18.054905,2.151512],[18.055126,2.151112],[18.055334,2.150737],[18.055715,2.150411],[18.056246,2.150184],[18.05669,2.149933],[18.057357,2.149792],[18.057975,2.149763],[18.058791,2.149547],[18.059469,2.149194],[18.059961,2.148631],[18.060241,2.14792],[18.060311,2.147185],[18.060122,2.146601],[18.059933,2.146017],[18.059385,2.145436],[18.058975,2.145152],[18.05848,2.14508],[18.058135,2.145356],[18.057803,2.145806],[18.057384,2.145921],[18.056567,2.145926],[18.0558,2.146005],[18.055342,2.14592],[18.054994,2.145611],[18.054633,2.145315],[18.054297,2.144856],[18.053885,2.144348],[18.053599,2.143977],[18.053349,2.143555],[18.053097,2.142885],[18.052686,2.142314],[18.052236,2.141608],[18.051837,2.141025],[18.05134,2.140717],[18.050671,2.140584],[18.050076,2.140351],[18.049604,2.140068],[18.049267,2.139485],[18.048928,2.138802],[18.048888,2.138255],[18.048947,2.137732],[18.049055,2.137109],[18.049138,2.136573],[18.049371,2.136148],[18.049504,2.135724],[18.049649,2.135151],[18.04984,2.133298],[18.049885,2.13278],[18.049896,2.132063],[18.049924,2.131378],[18.049638,2.131117],[18.049569,2.130153],[18.049178,2.129759],[18.049087,2.128977],[18.049027,2.128237],[18.048763,2.127776],[18.048578,2.127395],[18.048308,2.125811],[18.048312,2.125126],[18.048516,2.124886],[18.04857,2.123276],[18.04854,2.122281],[18.048303,2.122137],[18.048323,2.121717],[18.048521,2.121596],[18.048536,2.120146],[18.0485,2.11939],[18.048486,2.118466],[18.048105,2.118237],[18.047634,2.117626],[18.046958,2.117001],[18.046401,2.116574],[18.045938,2.115884],[18.04568,2.115152],[18.044834,2.115302],[18.044688,2.114768],[18.044716,2.114162],[18.044672,2.113374],[18.044439,2.113269],[18.044435,2.112627],[18.044673,2.112291],[18.044699,2.111159],[18.044678,2.11044],[18.044735,2.109283],[18.044923,2.10888],[18.045123,2.107962],[18.045175,2.107293],[18.045379,2.106973],[18.045666,2.10592],[18.04567,2.105164],[18.04589,2.105034],[18.046156,2.10438],[18.046461,2.103772],[18.046656,2.103341],[18.046932,2.103085],[18.047174,2.102581],[18.0474,2.101823],[18.047728,2.101088],[18.047971,2.100625],[18.048181,2.10001],[18.048556,2.099132],[18.048893,2.098469],[18.049032,2.097863],[18.048926,2.096023],[18.04868,2.095985],[18.0487,2.095244],[18.048913,2.095163],[18.049148,2.094684],[18.04914,2.093938],[18.049327,2.093294],[18.049419,2.092982],[18.049609,2.092331],[18.049659,2.091686],[18.049857,2.09135],[18.050199,2.090217],[18.050123,2.089428],[18.050404,2.088781],[18.050383,2.087881],[18.050623,2.086964],[18.050635,2.086207],[18.050646,2.085617],[18.050844,2.085457],[18.050894,2.084549],[18.051084,2.084508],[18.051341,2.08363],[18.051388,2.082856],[18.051605,2.082872],[18.051791,2.082114],[18.052215,2.081474],[18.052481,2.081027],[18.052637,2.080476],[18.05268,2.079767],[18.052869,2.079622],[18.052879,2.078619],[18.052867,2.077846],[18.052877,2.076818],[18.052842,2.076301],[18.052545,2.075498],[18.052287,2.074838],[18.052079,2.074441],[18.05208,2.073119],[18.051809,2.073098],[18.051825,2.071551],[18.051547,2.071274],[18.051559,2.070629],[18.051563,2.069928],[18.051519,2.069211],[18.051529,2.068239],[18.051533,2.067411],[18.051763,2.066238],[18.05153,2.065323],[18.051779,2.0649],[18.051771,2.063434],[18.051989,2.062804],[18.052031,2.061871],[18.052058,2.061059],[18.052295,2.060962],[18.052288,2.059695],[18.052485,2.059511],[18.052521,2.058786],[18.05278,2.058521],[18.05284,2.057836],[18.053004,2.057493],[18.053233,2.057404],[18.05325,2.056872],[18.053594,2.05674],[18.05398,2.056404],[18.054239,2.056123],[18.054538,2.055707],[18.054518,2.055172],[18.054772,2.055204],[18.055023,2.054717],[18.055288,2.053943],[18.055553,2.053264],[18.055781,2.052872],[18.056025,2.052616],[18.056012,2.051844],[18.056024,2.051166],[18.056017,2.049884],[18.055524,2.049584],[18.055496,2.048772],[18.055733,2.048595],[18.055714,2.04807],[18.055492,2.048063],[18.055492,2.048063],[18.055514,2.047816],[18.055696,2.047775],[18.055955,2.047256],[18.056242,2.04633],[18.05623,2.045557],[18.056459,2.045452],[18.056709,2.04483],[18.05673,2.04432],[18.056933,2.043904],[18.056933,2.043904],[18.057246,2.043257],[18.057685,2.04006],[18.057686,2.040052],[18.058332,2.038198],[18.058944,2.035915],[18.059189,2.03284],[18.059407,2.030691],[18.059755,2.028409],[18.060464,2.025927],[18.061859,2.022879],[18.063912,2.020059],[18.065967,2.01747],[18.067464,2.015082],[18.06939,2.012825],[18.070627,2.010934],[18.071798,2.008912],[18.073167,2.007087],[18.074014,2.005794],[18.074819,2.002849],[18.075329,2.000136],[18.075409,1.996732],[18.075264,1.994354],[18.074898,1.993398],[18.074397,1.991881],[18.073886,1.98858],[18.07411,1.987488],[18.073343,1.985378],[18.072809,1.983795],[18.072074,1.981684],[18.071356,1.976368],[18.071156,1.969794],[18.071672,1.968139],[18.07252,1.96711],[18.073108,1.966545],[18.072995,1.963836],[18.072979,1.960863],[18.073199,1.959077],[18.072078,1.958191],[18.071766,1.955285],[18.072047,1.952508],[18.072173,1.951582],[18.071703,1.943622],[18.071195,1.940717],[18.070629,1.9392],[18.069626,1.935934],[18.069058,1.93412],[18.068093,1.931779],[18.067652,1.929138],[18.067411,1.927058],[18.067434,1.925207],[18.066997,1.92326],[18.066562,1.921709],[18.064756,1.915639],[18.064353,1.913956],[18.063406,1.908675],[18.0633,1.907353],[18.060708,1.901552],[18.060242,1.900477],[18.008325,1.900317],[18.007777,1.901586],[18.007963,1.904262],[18.008748,1.906761],[18.010388,1.908566],[18.010571,1.910637],[18.010715,1.912274],[18.010076,1.914353],[18.009152,1.917355],[18.007786,1.919546],[18.007111,1.921794],[18.009957,1.924369],[18.011857,1.92669],[18.012554,1.928673],[18.011709,1.931095],[18.010008,1.933953],[18.009757,1.935164],[18.01054,1.937232],[18.012952,1.939032],[18.013916,1.942653],[18.013671,1.945072],[18.012737,1.946977],[18.012315,1.948274],[18.011395,1.952596],[18.014067,1.954913],[18.017935,1.956101],[18.021639,1.958671],[18.026621,1.959421],[18.029457,1.960182],[18.032311,1.964311],[18.034565,1.968529],[18.035098,1.971894],[18.034688,1.975349],[18.033757,1.977858],[18.031796,1.9802],[18.029406,1.982372],[18.025801,1.982392],[18.021668,1.979825],[18.018303,1.976476],[18.014426,1.973734],[18.011234,1.970643],[18.008498,1.972385],[18.007749,1.976793],[18.01086,1.980661],[18.014226,1.984269],[18.015184,1.986682],[18.013541,1.987342],[18.010201,1.985759],[18.008489,1.986632],[18.010832,1.991282],[18.012651,1.994294],[18.014038,1.99679],[18.013534,1.998779],[18.009764,2.000009],[18.006418,2.0002],[18.003674,2.000474],[18.002831,2.003328],[18.003027,2.007817],[18.005956,2.009701],[18.005028,2.012642],[18.006423,2.016606],[18.007429,2.019464],[18.010899,2.018998],[18.012291,2.022444],[18.010842,2.024093],[18.007237,2.024113],[18.005703,2.025935],[18.006402,2.028176],[18.011639,2.028665],[18.011908,2.030563],[18.010632,2.032642],[18.008228,2.032483],[18.006074,2.031027],[18.00453,2.031123],[18.001786,2.031483],[18.001629,2.034161],[18.001037,2.035719],[17.999076,2.038061],[17.99858,2.041518],[18.000561,2.042716],[18.002113,2.043916],[18.00324,2.045895],[18.003337,2.048053],[18.001806,2.05048],[17.998547,2.050757],[17.996244,2.053361],[17.99454,2.055616],[17.992405,2.057528],[17.990273,2.059958],[17.990203,2.062635],[17.991162,2.065393],[17.992059,2.06797],[17.993244,2.06918],[17.991799,2.071692],[17.988981,2.074299],[17.986077,2.076734],[17.981712,2.078831],[17.979234,2.080832],[17.976499,2.08292],[17.974543,2.086126],[17.974565,2.089839],[17.974843,2.093551],[17.97564,2.097778],[17.97583,2.100885],[17.976188,2.103474],[17.976287,2.105805],[17.976304,2.108654],[17.976661,2.11107],[17.976844,2.113055],[17.976347,2.116167],[17.975422,2.11954],[17.975178,2.121787],[17.97631,2.12463],[17.978215,2.127468],[17.979856,2.129186],[17.983473,2.131237],[17.986572,2.132773],[17.987187,2.1351],[17.986261,2.138301],[17.98619,2.140805],[17.985258,2.142797],[17.98501,2.144526],[17.985548,2.148322],[17.986048,2.151853],[17.986873,2.15479],[17.986891,2.157812],[17.988457,2.161343],[17.988389,2.164366],[17.989092,2.167039],[17.988341,2.17067],[17.987669,2.173092],[17.986056,2.17621],[17.986585,2.178539],[17.98462,2.180105],[17.981342,2.177275],[17.978065,2.174704],[17.975055,2.173772],[17.968957,2.173291],[17.967245,2.173992],[17.96605,2.175208],[17.965641,2.178492],[17.96712,2.181851],[17.969281,2.184343],[17.972815,2.186825],[17.97583,2.188621],[17.978068,2.189557],[17.979629,2.192311],[17.981025,2.196102],[17.980528,2.198954],[17.97986,2.202153],[17.978842,2.204146],[17.976455,2.206837],[17.974675,2.208844],[17.973136,2.211521],[17.972405,2.212791],[17.971443,2.215503],[17.971373,2.218181],[17.971644,2.220338],[17.972175,2.222925],[17.973394,2.225854],[17.972298,2.229056],[17.969834,2.233216],[17.967018,2.235911],[17.964994,2.237846],[17.963438,2.240164],[17.963882,2.242579],[17.96527,2.244989],[17.968365,2.24566],[17.97326,2.245975],[17.976783,2.246558],[17.980741,2.248088],[17.985309,2.249853],[17.987118,2.25202],[17.989966,2.254593],[17.993597,2.258628],[17.996371,2.263101],[17.999318,2.267573],[18.00166,2.27153],[18.001849,2.274292],[17.99874,2.271289],[17.995796,2.267249],[17.993076,2.263517],[17.989739,2.25943],[17.985172,2.256609],[17.980097,2.255],[17.974842,2.253333],[17.969528,2.253252],[17.965665,2.253194],[17.960693,2.254517],[17.957877,2.257211],[17.958756,2.260574],[17.956179,2.261256],[17.951625,2.259668],[17.948014,2.258741],[17.943373,2.257906],[17.939427,2.258363],[17.937641,2.261224],[17.938011,2.265453],[17.936047,2.267193],[17.933884,2.264443],[17.932657,2.260391],[17.930245,2.259197],[17.928626,2.261107],[17.929077,2.264559],[17.930051,2.269476],[17.932218,2.27283],[17.931465,2.275944],[17.931228,2.279228],[17.931763,2.28242],[17.933159,2.286038],[17.934985,2.289654],[17.935695,2.293363],[17.937593,2.294906],[17.940258,2.295493],[17.943259,2.29487],[17.946587,2.291567],[17.949062,2.289306],[17.951376,2.288687],[17.955762,2.289782],[17.95947,2.292522],[17.962318,2.294922],[17.964826,2.297842],[17.965786,2.30034],[17.964849,2.301469],[17.961831,2.299242],[17.958039,2.296935],[17.954347,2.296958],[17.952636,2.297833],[17.951277,2.300173],[17.950775,2.302249],[17.950962,2.304752],[17.950119,2.307262],[17.952095,2.308287],[17.953972,2.309959],[17.955651,2.310726],[17.957009,2.311559],[17.958518,2.312485],[17.961399,2.313409],[17.962951,2.3145],[17.965781,2.314029],[17.967317,2.312594],[17.967627,2.310584],[17.968833,2.307921],[17.970116,2.3072],[17.97211,2.306929],[17.974364,2.306914],[17.976087,2.304507],[17.976972,2.301911],[17.979286,2.301248],[17.981087,2.301042],[17.982832,2.302067],[17.983939,2.304003],[17.983117,2.30647],[17.981776,2.308227],[17.981593,2.309847],[17.980704,2.311796],[17.984636,2.312483],[17.985527,2.310858],[17.988107,2.311619],[17.991205,2.3127],[17.992489,2.312238],[17.993566,2.309446],[17.994066,2.307047],[17.99521,2.304773],[17.996686,2.303922],[17.998488,2.303781],[18.000089,2.30254],[18.001505,2.302531],[18.002388,2.299481],[18.003728,2.297595],[18.004625,2.297006],[18.00662,2.296864],[18.007578,2.295692],[18.00892,2.295124],[18.008809,2.294917],[18.009152,2.294354],[18.009421,2.293842],[18.009852,2.293603],[18.010309,2.293451],[18.010841,2.29336],[18.011349,2.293481],[18.01198,2.293477],[18.012685,2.293411],[18.013191,2.293258],[18.013536,2.292895],[18.013991,2.292481],[18.014483,2.29203],[18.014456,2.291669],[18.014479,2.291432],[18.014749,2.291107],[18.014982,2.290645],[18.015139,2.290121],[18.015097,2.289262],[18.014982,2.28874],[18.014756,2.288269],[18.014456,2.287748],[18.014304,2.287276],[18.01445,2.286889],[18.014635,2.286664],[18.015126,2.2861],[18.015669,2.28586],[18.016399,2.285818],[18.016994,2.285964],[18.017379,2.286273],[18.017825,2.28637],[18.018295,2.286192],[18.018615,2.285979],[18.019072,2.285901],[18.019321,2.286074],[18.019605,2.285997],[18.019887,2.285522],[18.019996,2.285198],[18.019919,2.284763],[18.01983,2.28439],[18.01947,2.284143],[18.019146,2.283872],[18.018997,2.283698],[18.018932,2.283288],[18.019141,2.282988],[18.019485,2.282674],[18.020053,2.282447],[18.020794,2.282206],[18.021732,2.281876],[18.022065,2.281637],[18.022285,2.2812],[18.02269,2.280762],[18.022873,2.280226],[18.02308,2.279701],[18.023396,2.278853],[18.023456,2.278454],[18.023341,2.277982],[18.023067,2.277673],[18.02283,2.277338],[18.022359,2.277266],[18.022,2.277231],[18.021602,2.276923],[18.02129,2.276551],[18.021248,2.275618],[18.02106,2.27532],[18.020738,2.275223],[18.020441,2.275212],[18.020256,2.2753],[18.019985,2.275589],[18.01964,2.275877],[18.019233,2.276054],[18.018836,2.27587],[18.018476,2.27571],[18.018495,2.274739],[18.018752,2.27424],[18.01918,2.273453],[18.019858,2.273075],[18.020242,2.27306],[18.020711,2.272945],[18.021068,2.272582],[18.021499,2.272318],[18.021918,2.271966],[18.022175,2.271529],[18.022874,2.270579],[18.023318,2.270277],[18.023774,2.270013],[18.024353,2.269574],[18.024685,2.26926],[18.024767,2.268525],[18.02422,2.268093],[18.023647,2.267599],[18.023237,2.267265],[18.023106,2.264055],[18.023099,2.262959],[18.02343,2.262509],[18.02401,2.262182],[18.024703,2.262265],[18.025274,2.262535],[18.025884,2.263104],[18.026443,2.263473],[18.027025,2.263495],[18.027679,2.263204],[18.028244,2.262653],[18.028538,2.262128],[18.028682,2.261331],[18.028772,2.259973],[18.028781,2.259401],[18.028481,2.258917],[18.02828,2.258408],[18.027497,2.25794],[18.026939,2.257632],[18.026602,2.257249],[18.026376,2.256765],[18.026374,2.256379],[18.026632,2.256141],[18.027064,2.255901],[18.027693,2.255574],[18.028285,2.255296],[18.028704,2.254995],[18.029023,2.254582],[18.029094,2.254009],[18.029041,2.253474],[18.029001,2.253039],[18.028788,2.252629],[18.02866,2.251921],[18.02877,2.251596],[18.029177,2.251532],[18.029635,2.251541],[18.029918,2.251216],[18.029997,2.25007],[18.030182,2.249907],[18.030428,2.249594],[18.030661,2.249356],[18.031067,2.249005],[18.03135,2.248668],[18.031657,2.248292],[18.031902,2.247843],[18.031912,2.247556],[18.031562,2.246986],[18.031477,2.244927],[18.031684,2.244181],[18.032099,2.242901],[18.032407,2.24141],[18.031977,2.240243],[18.031127,2.239503],[18.031226,2.238545],[18.030904,2.237696],[18.029939,2.236565],[18.029947,2.235943],[18.029622,2.235347],[18.028989,2.23504],[18.028531,2.235018],[18.027963,2.235146],[18.027643,2.235422],[18.027249,2.235773],[18.026718,2.235913],[18.02626,2.235941],[18.0259,2.235856],[18.025639,2.235609],[18.025302,2.235175],[18.025113,2.234628],[18.025296,2.234092],[18.025418,2.233842],[18.025749,2.233392],[18.025908,2.23298],[18.026091,2.232569],[18.026137,2.23212],[18.026383,2.23177],[18.026566,2.231383],[18.02655,2.230848],[18.026373,2.230276],[18.026532,2.229827],[18.026739,2.229303],[18.026748,2.228768],[18.026645,2.228196],[18.026184,2.227639],[18.025009,2.227708],[18.024491,2.227998],[18.024332,2.228335],[18.024174,2.228747],[18.023879,2.229122],[18.023325,2.229511],[18.022856,2.229738],[18.022262,2.229754],[18.021902,2.229495],[18.021553,2.229074],[18.021446,2.227743],[18.021641,2.227294],[18.021898,2.226919],[18.022354,2.226492],[18.023044,2.226028],[18.02382,2.225512],[18.024547,2.22496],[18.025103,2.22482],[18.025596,2.224568],[18.0262,2.224153],[18.026705,2.223764],[18.026998,2.22324],[18.027008,2.222704],[18.026782,2.22232],[18.026335,2.221974],[18.026023,2.221565],[18.025871,2.221031],[18.025881,2.220546],[18.02599,2.220147],[18.026185,2.219722],[18.026405,2.21921],[18.026415,2.218874],[18.026696,2.218263],[18.027051,2.217738],[18.028111,2.216947],[18.028581,2.217019],[18.029041,2.217377],[18.029428,2.217922],[18.029813,2.218156],[18.030369,2.217916],[18.031412,2.216615],[18.031682,2.216203],[18.031839,2.215517],[18.031997,2.215068],[18.032353,2.214668],[18.032734,2.214167],[18.033202,2.213853],[18.033756,2.213389],[18.034237,2.213063],[18.034295,2.212565],[18.033946,2.212081],[18.033212,2.211476],[18.030451,2.209115],[18.029793,2.208759],[18.029285,2.208563],[18.028814,2.208491],[18.028171,2.208644],[18.027665,2.208722],[18.026775,2.208902],[18.026131,2.208843],[18.025449,2.208549],[18.024983,2.208253],[18.024448,2.207733],[18.023116,2.20641],[18.022754,2.206001],[18.022429,2.205468],[18.0224,2.204784],[18.022619,2.20416],[18.022802,2.203673],[18.023108,2.203186],[18.023452,2.202698],[18.023994,2.202284],[18.024623,2.202006],[18.025316,2.201965],[18.025936,2.20216],[18.026607,2.202629],[18.027154,2.203099],[18.02769,2.203768],[18.028165,2.204487],[18.028698,2.204757],[18.029206,2.204729],[18.029698,2.20439],[18.030117,2.203977],[18.030337,2.20354],[18.030556,2.202941],[18.030912,2.202578],[18.031071,2.20015],[18.031006,2.199677],[18.030743,2.199168],[18.030394,2.198648],[18.030268,2.198263],[18.030289,2.197702],[18.03041,2.197328],[18.031115,2.197311],[18.031574,2.197458],[18.032194,2.197728],[18.032678,2.197949],[18.033063,2.198059],[18.033532,2.197931],[18.033852,2.197693],[18.034171,2.197255],[18.034279,2.19657],[18.034435,2.195909],[18.034123,2.195351],[18.033971,2.194854],[18.034043,2.194406],[18.034221,2.19316],[18.034428,2.192698],[18.034821,2.192098],[18.035015,2.191549],[18.035073,2.190864],[18.03544,2.19019],[18.035882,2.189615],[18.036287,2.189064],[18.036519,2.188515],[18.036503,2.187893],[18.036388,2.187408],[18.036286,2.186924],[18.036457,2.186512],[18.036863,2.186049],[18.03732,2.186034],[18.037805,2.186292],[18.03834,2.186849],[18.0387,2.187083],[18.039233,2.187242],[18.039702,2.187102],[18.04001,2.186801],[18.040328,2.186252],[18.040582,2.185304],[18.040802,2.184792],[18.041319,2.184403],[18.041887,2.184089],[18.042566,2.183886],[18.04311,2.183783],[18.04374,2.183629],[18.044455,2.183239],[18.045083,2.182737],[18.046032,2.182184],[18.046451,2.181808],[18.046509,2.181148],[18.046481,2.1807],[18.046317,2.180216],[18.046436,2.179431],[18.046112,2.17891],[18.045773,2.178228],[18.045336,2.177533],[18.045024,2.177025],[18.044562,2.176343],[18.044188,2.175847],[18.043284,2.175728],[18.0428,2.175482],[18.042365,2.175199],[18.041818,2.174717],[18.041381,2.174097],[18.041402,2.173437],[18.041548,2.172976],[18.041768,2.172526],[18.042088,2.172288],[18.042903,2.172022],[18.043643,2.171631],[18.044358,2.171166],[18.044986,2.170764],[18.045602,2.170225],[18.045834,2.169714],[18.04583,2.169091],[18.045852,2.168556],[18.04565,2.167947],[18.045436,2.167314],[18.045309,2.166717],[18.045218,2.165996],[18.045102,2.165337],[18.045246,2.164564],[18.045638,2.163902],[18.045969,2.163377],[18.046709,2.163062],[18.047489,2.163144],[18.04801,2.16334],[18.048568,2.163461],[18.049162,2.163594],[18.049931,2.163889],[18.050688,2.164295],[18.051431,2.16429],[18.052025,2.164399],[18.052619,2.16437],[18.053261,2.164167],[18.053953,2.164063],[18.054696,2.164084],[18.055316,2.164304],[18.056039,2.165283],[18.056425,2.165741],[18.056883,2.165788],[18.057426,2.165461],[18.05798,2.165022],[18.058409,2.16441],[18.058665,2.163724],[18.058859,2.163001],[18.059016,2.162502],[18.059186,2.161878],[18.059122,2.161456],[18.059019,2.160809],[18.058719,2.160425],[18.058024,2.160006],[18.057329,2.159637],[18.057005,2.159228],[18.056754,2.158632],[18.056478,2.158074],[18.056301,2.157403],[18.05605,2.156794],[18.05589,2.154854]]]]
        fmu.reload
        expect(fmu.geojson['geometry']['coordinates']).to eql (fmu.geometry.coordinates)
      end
    end
  end

  describe 'Hooks' do
    describe '#update_geojson' do
      context 'when geojson is blank' do
        it 'return nil' do
          fmu = create(:fmu, geojson: nil)
          expect(fmu.geojson).to eql nil
        end
      end

      context 'when geojson is present' do
        it 'updates geometry and centroid' do
          country = create(:country)
          fmu = create(:fmu, :geojson_no_props, country: country)
          fmu.reload

          expect(fmu.geometry).not_to be_nil
          expect(fmu.geojson['properties']['centroid']).to eql({
            "type" => "Point",
            "coordinates" => [
              18.777923313,
              50.50818234
            ]
          })
        end

        it 'fill geojson with properties from fmu' do
          country = create(:country)
          operator = create(:operator, country: country, fa_id: 'fa_id')
          fmu = create(:fmu_geojson, country: country)
          create(:fmu_operator, fmu: fmu, operator: operator)
          fmu.reload
          fmu.save

          expect(fmu.geojson['properties']['fmu_name']).to eql fmu.name
          expect(fmu.geojson['properties']['company_na']).to eql fmu.operator.name
          expect(fmu.geojson['properties']['operator_id']).to eql fmu.operator.id
          expect(fmu.geojson['properties']['certification_fsc']).to eql fmu.certification_fsc
          expect(fmu.geojson['properties']['certification_pefc']).to eql fmu.certification_pefc
          expect(fmu.geojson['properties']['certification_olb']).to eql fmu.certification_olb
          expect(fmu.geojson['properties']['certification_pafc']).to eql fmu.certification_pafc
          expect(fmu.geojson['properties']['certification_fsc_cw']).to eql fmu.certification_fsc_cw
          expect(fmu.geojson['properties']['certification_tlv']).to eql fmu.certification_tlv
          expect(fmu.geojson['properties']['certification_ls']).to eql fmu.certification_ls
        end
      end

      context 'when a new observation is added' do
        it 'number of observations should be in the geojson' do
          country = create(:country)
          operator = create(:operator, country: country, fa_id: 'fa_id')
          fmu = create(:fmu_geojson, operator: operator, country: country)
          fmu.reload

          expect(fmu.geojson['properties']['observations']).to eql 0

          observation = create(:observation, operator: operator, fmu: fmu)
          observation.save
          fmu.reload

          expect(fmu.geojson['properties']['observations']).to eql 1
        end
      end

      context 'when an observation is removed' do
        it 'number of observations should be in the geojson' do
          country = create(:country)
          operator = create(:operator, country: country, fa_id: 'fa_id')
          fmu = create(:fmu_geojson, operator: operator, country: country)
          observation = create(:observation, operator: operator, fmu: fmu)
          observation.save

          fmu.reload
          expect(fmu.geojson['properties']['observations']).to eql 1

          observation.destroy
          fmu.reload

          expect(fmu.geojson['properties']['observations']).to eql 0
        end
      end
    end

    describe '#update_geometry' do
      it 'sets same coordinates than the ones provided in geojson' do
        country = create(:country)
        operator = create(:operator, country: country, fa_id: 'fa_id')
        fmu = create(:fmu_geojson, operator: operator, country: country)
        fmu.save

        fmu.reload
        expect(fmu.geojson['geometry']['coordinates']).to eql (fmu.geometry.coordinates)
      end
    end

    describe '#destroy' do
      it 'destroy operator_documents associated with the fmu' do
        another_fmu = create(:fmu)
        operator_document = create(:operator_document_fmu, fmu: another_fmu)
        another_fmu.destroy

        expect(OperatorDocument.where(id: operator_document.id).first).to be_nil
        expect(OperatorDocument.unscoped.where(id: operator_document.id).first).to be_present
      end
    end
  end

  describe 'Instance methods' do
    describe '#cache_key' do
      it 'return the default value with the locale' do
        fmu = create(:fmu)
        expect(fmu.cache_key).to match(/-#{Globalize.locale.to_s}\z/)
      end
    end
  end

  describe 'Class methods' do
    before :each do
      @country = create(:country)
      operator = create(:operator, fa_id: 'fa-id')
      @operator = create(:operator, country: @country, fa_id: 'fa_id')

      create(:fmu, country: @country)
      fmu1 = create(:fmu, country: operator.country)
      fmu2 = create(:fmu, country: @country)

      create(:fmu_operator, fmu: fmu1, operator: operator)
      create(:fmu_operator, fmu: fmu2, operator: @operator)
    end

    context 'when country_ids and operator_ids are not specified' do
      it 'fetch all fmu' do
        expect(Fmu.fetch_all(nil).count).to eq(Fmu.all.size)
      end
    end

    context 'when country_ids is specified' do
      it 'fetch fmus filtered by country' do
        expect(Fmu.fetch_all({'country_ids' => @country.id.to_s}).to_a).to eql(
          Fmu.where(country_id: @country.id).to_a
        )
      end
    end

    context 'when operator_ids is specified' do
      it 'fetch fmus filtered by operator' do
        expect(Fmu.fetch_all({'operator_ids' => @operator.id.to_s}).to_a).to eql(
          Fmu.joins(:fmu_operators).where(fmu_operators: {current: true, operator_id: @operator.id}).to_a
        )
      end
    end

    context 'when free is specified' do
      it 'fetch fmus filtered by free' do
        expect(Fmu.fetch_all({'free' => 'true'}).to_a).to eql(
          Fmu.where.not(id: FmuOperator.where(current: :true).pluck(:fmu_id)).group(:id).to_a
        )
      end
    end
  end
end
